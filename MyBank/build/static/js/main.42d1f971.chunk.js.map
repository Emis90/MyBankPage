{"version":3,"sources":["Components/Form.js","Components/Profile.js","Components/Card.js","Components/TForm.js","Components/Dashboard.js","Components/Root.js","App.js","serviceWorker.js","index.js"],"names":["Form","setToggle","setUser","user","useState","newUser","setNewUser","className","onChange","event","target","name","value","onSubmit","e","preventDefault","firstName","toUpperCase","slice","toLowerCase","lastName","created","Date","fetch","id","method","body","JSON","stringify","then","res","json","data","catch","error","console","log","submit","type","placeholder","required","pattern","Profile","toggle","style","fontSize","margin","paddingTop","email","phone","onClick","Card","transaction","date","split","time","display","flexDirection","justifyContent","amount","description","TForm","transactions","balance","setBalance","newTransaction","setNewTransaction","Number","alert","length","map","el","join","response","newBalance","toFixed","min","max","step","defaultValue","label","Dashboard","setTrans","useEffect","isOpen","ariaHideApp","content","top","left","right","bottom","width","marginRight","transform","fontWeight","key","Root","page","setPage","getUser","getBalance","changePage","App","Boolean","window","location","hostname","match","currentUser","Server","routes","this","namespace","get","post","schema","request","requestBody","parse","push","put","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42d1f971.chunk.js","sourcesContent":["import React, {useState } from 'react'\n\n//use span for errors\nconst Form = ({setToggle, setUser, user}) => {\n    const [newUser, setNewUser] = useState({})\n  \n    const change = (event) => {\n        setNewUser({...newUser, \n         [event.target.name]: event.target.value\n        })\n     }\n\n    const submit = (e) => {\n      e.preventDefault()\n        newUser.firstName = newUser.firstName[0].toUpperCase() + newUser.firstName.slice(1).toLowerCase()\n        newUser.lastName = newUser.lastName[0].toUpperCase() + newUser.lastName.slice(1).toLowerCase()\n        newUser.created = new Date()\n        fetch(`/api/account/${user.id}`, { method: 'put', body: JSON.stringify(newUser) })\n        .then(res => res.json())\n        .then(data => {\n          setUser(data)\n          setToggle('info')})\n        .catch(error => console.log(error))\n    }\n\n    return(\n        <div className='form'>\n          <h2>Submit your new credentials</h2>\n        <form onChange={change} onSubmit={(e) => submit(e)}>\n        <div className='fields'>\n        <input type=\"text\" name=\"firstName\" placeholder='First name'required/>\n        </div>\n        <div className='fields'>\n        <input type=\"text\" name=\"lastName\" placeholder='Last name' required/>\n        </div>\n        <div className='fields'>\n        <input type=\"tel\" name=\"phone\" placeholder='phone'pattern=\"[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\" required/>\n        </div>\n        <div className='fields'>\n        <input type=\"email\" name=\"email\" placeholder='email' required/>\n        </div>\n        <div className='fields'>\n        <input type=\"submit\" value=\"Submit\" id='submit'/> \n        </div>\n        </form>\n        </div>\n        )\n}\n\nexport default Form","import React,{ useState } from 'react';\nimport Form from './Form'\nconst Profile = ({user, setUser}) => {\n    \n    const [toggle, setToggle] = useState('info')\n    \n   if(toggle === 'info') {\n    return (\n        <div className='profile'>\n            {user && user ? (\n            <div>\n            <p style={{fontSize: 30, margin: 0, paddingTop: '2em'}}>{user.firstName} {user.lastName}</p>\n            <p>{user.email}</p>\n            <p>{user.phone}</p>\n            <button id='changeButton' onClick={()=> setToggle('change')}>Change credentials</button> \n            </div>\n            ) : null}\n        </div>\n    )\n   } else {\n     return <Form setToggle={setToggle} setUser={setUser} user={user}/>\n   }\n\n}\n\nexport default Profile","import React from 'react'\n\nconst Card = ({transaction})=>{\n    transaction.date = transaction.created.split('T')[0]\n    transaction.time = transaction.created.split('T')[1].split('.')[0]\n    return(\n        <div className='card'>\n         <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n         <p style={{fontSize: 10}}>{transaction.date}      {transaction.time}</p>\n         <p style={{fontSize: 10}}>{transaction.type}</p>\n         </div>\n         <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n             <h3 style={{margin: 0}}>${transaction.amount}</h3>\n         <h3 style={{margin: 0}}>{transaction.description}</h3>\n         </div>\n        </div>\n    )\n}\n\nexport default Card","import React, {useState} from 'react'\n\n\nconst TForm = ({transactions, setToggle, balance, setBalance}) => {\n    const [newTransaction, setNewTransaction] = useState({type: 'Credit'})\n    const change = (event) => {\n        if([event.target.name] === 'Debit') {\n            setNewTransaction({...newTransaction, type: 'Debit'})\n        } else {\n            setNewTransaction({...newTransaction, \n                [event.target.name]: event.target.value\n               })\n            }\n        }\n        \n    const cancel = () => {\n        setToggle(false)\n        }\n    const submit = (e) => {\n       e.preventDefault()\n       console.log(newTransaction)\n       if(Number(newTransaction.amount) > Number(balance)) {\n           alert(`Cannot submit payment of ${newTransaction.amount}, insufficient funds`)\n           e.preventDefault()\n        } else {\n        newTransaction.id = transactions[transactions.length - 1].id - 1\n        newTransaction.created = new Date()\n        newTransaction.description = newTransaction.description.split(' ').map(el => {\n        return el[0].toUpperCase() + el.slice(1).toLowerCase()\n         }).join(' ')\n    \n        fetch('/api/account/100/transactions', {method: 'post', body: JSON.stringify(newTransaction)})\n        .then((response) => response.json())\n        .then((data) => {\n            let newBalance = balance - data[data.length - 1].amount\n            setBalance(newBalance.toFixed(2))\n            setToggle(false)\n        })\n        .catch(error => error)\n        }\n    }\n    \n   return  (\n      <div className='form'>\n        <div style={{display: 'flex', flexDirection: 'column'}}>\n        <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'flex-end'}}>\n            <button onClick={cancel} id='cancelButton'>X</button>\n        </div>\n        <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'flex-start'}}>\n        <h2>Add another transaction</h2>\n        </div>\n        </div>\n        \n      <form onChange={change} onSubmit={(e) => submit(e)}>\n         <div className='fields'>\n         <input type=\"number\" name='amount' placeholder='amount' min='0.01' max='1000000' required step=\".01\"/> \n         </div>\n         <div className='fields'>\n         <input type='text' name='description' placeholder='description' required/>\n         </div>\n         <div className='fields'>\n         <select name='type' defaultValue='Credit'>\n             <option type='text' value='Credit' label='credit'/>\n             <option type='text' value='Debit' label='debit'/>\n         </select>\n         </div>\n         <div className='fields'>\n         <input type='submit' value='Submit'/>\n         </div>\n      </form>\n      </div>\n    )\n}\n\nexport default TForm","import React, { useEffect, useState } from 'react';\nimport Card from './Card'\nimport Modal from 'react-modal'\nimport TForm from './TForm'\n\nconst Dashboard = ({balance, setBalance}) => {\n    const [transactions, setTrans] = useState([])\n    const [toggle, setToggle] = useState(false)\n    const getTransactions = ()=> {\n            fetch('/api/account/100/transactions', { method: 'get'})\n            .then((response) => response.json())\n            .then((data) => {\n                setTrans(data)\n            })\n            .catch(error => error)\n          }\n    useEffect(() => {\n      getTransactions()\n    }, [balance])\n    const modalStyle = {\n        content : {\n          top: '50%',\n          left: '50%',\n          right: 'auto',\n          bottom: 'auto',\n          width: '24em',\n          marginRight: '-50%',\n          transform: 'translate(-50%, -50%)'\n        }\n      };\n    return (\n        <div className='dashboard'>\n            <div className='currentBalance'>\n            <h3 id='balanceTxt'>Current balance: {balance ? balance : null}</h3>\n            <button id='randomButton' onClick={()=> setToggle(true)}>Purchase something random</button>\n            <Modal isOpen={toggle} ariaHideApp={false} style={modalStyle}>\n             <TForm setBalance={setBalance} transactions={transactions} setToggle={setToggle} balance={balance}/>\n            </Modal>\n            </div>\n            <h3 style={{fontWeight: 'bold'}}>Transactions</h3>\n            <div className='transactionsBox'>\n                <div className='passedTransactions'>\n                  {transactions && transactions ? transactions.map(el => {\n                      return <Card key={el.id} transaction={el}/>\n                    }) : null}\n            </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Dashboard","import React, { useState, useEffect } from 'react';\nimport Profile from './Profile'\nimport Dashboard from './Dashboard'\n\nconst Root = () => {\n    const [ page, setPage ] = useState('dashboard')\n    const [ user, setUser ] = useState({}) \n    const [ balance, setBalance ] = useState(0)\n  \n    const getUser = () => {\n      try {\n        fetch('/api/account/100', {method: 'get'})\n        .then((response) => response.json())\n        .then((user) => {\n          setUser(user)\n        })\n        .catch(error => error)  \n      } catch (error) {\n        console.log(error)\n      }\n  \n    }\n  \n    const getBalance = () => {\n      try {\n        fetch(`/api/account/${user.id}/balance`, { method: 'get' })\n        .then((response) => response.json())\n        .then((balance) => {\n          setBalance(balance)\n        })\n        .catch(error => error)  \n      } catch (error) {\n        console.log(error)\n      }\n\n    }\n  \n    useEffect(() => {\n      console.log('useEffect get user')\n      getUser()\n    }, [])\n\n    useEffect(() => {\n      console.log('useEffect get balance afterUser')\n      getBalance()\n    })\n  \n    const changePage = (page) => {\n      setPage(page)\n    }\n    \n    return (\n      <div className='Root'>\n        <h3>Welcome back</h3>\n        <header className='App-header'>\n          <div className='dashHeader' onClick={()=> changePage('dashboard')}><p>dashboard</p></div>\n          <div className='profHeader' onClick={()=> changePage('profile')}><p>profile</p></div>\n        </header>\n        <div className='container'>\n          { page === 'dashboard' ? <Dashboard balance={balance} setBalance={setBalance}/> : <Profile user={user} setUser={setUser}/>}\n        </div>\n      </div>\n    );\n}\n\n\nexport default Root","import React  from 'react';\nimport Root from './Components/Root'\nimport './App.css';\n\n\nfunction App() {\n   return (\n     <Root/>\n   )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Server } from \"miragejs\"\nconst transactions = [\n  {\n      \"id\": 1000,\n      \"created\": \"2020-02-21T20:32:03.681Z\",\n      \"amount\": 2000.00,\n      \"type\": \"Debit\",\n      \"description\": \"Payroll Direct Deposit\"\n  },\n  {\n      \"id\": 999,\n      \"created\": \"2020-02-21T20:14:09.703Z\",\n      \"amount\": 45.55,\n      \"type\": \"Credit\",\n      \"description\": \"Main Street Gas Station\"\n  }\n]\nconst currentUser = {\n  \"id\": 1000,\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"jane.smith@example.com\",\n  \"phone\": \"5555555555\",\n  \"created\": \"2020-02-21T02:00:00.000Z\",\n  \"balance\": \"12345.67\"\n}\n\n\nnew Server({\n  routes() {\n    this.namespace = \"/api\"\n\n    this.get(\"/account/:id\", () => {\n      try {\n        return currentUser\n      } catch (error) {\n        console.log(\"error: \", error)\n      }\n    })\n    this.get(\"/account/:id/transactions\", ()=> {\n      try {\n        return transactions\n      } catch (error) {\n        console.log(error)\n      }\n    })\n    this.get(\"/account/:id/balance\", () => {\n      try {\n        console.log(currentUser.balance)\n        return currentUser.balance\n      } catch (error) {\n        console.log(\"error: \", error)\n      }\n    })\n    this.post(\"/account/:id/transactions\", (schema, request, response) => {\n      try {\n        let data = request.requestBody\n        data = JSON.parse(data)\n        transactions.push(data)\n        return transactions\n      } catch (error) {\n        console.log(\"error: \", error)\n      }\n    })\n    this.put(\"/account/:id\", (schema, request, response) => {\n       try {\n         let newUser = request.requestBody\n         newUser = JSON.parse(newUser)\n         return newUser\n       } catch (error) {\n            console.log(\"error: \", error)\n       }\n    })\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}